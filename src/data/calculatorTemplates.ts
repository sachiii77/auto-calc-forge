
import * as math from 'mathjs';

// Mock calculator templates for the MVP
// In a real implementation, these would be generated by AI

interface CalculatorField {
  name: string;
  label: string;
  type: "number" | "select" | "text";
  options?: string[];
  placeholder?: string;
}

export interface CalculatorTemplate {
  id: string;
  title: string;
  description: string;
  fields: CalculatorField[];
  calculate: (values: Record<string, any>) => { result: string; breakdown?: string[] };
}

export const templates: CalculatorTemplate[] = [
    {
        id: 'bmi-calculator',
        title: "BMI Calculator",
        description: "Calculates Body Mass Index (BMI) based on height and weight.",
        fields: [
            { name: 'weight', label: 'Weight (kg)', type: 'number', placeholder: 'e.g., 70' },
            { name: 'height', label: 'Height (cm)', type: 'number', placeholder: 'e.g., 175' },
        ],
        calculate: (values) => {
            const weight = Number(values.weight);
            const height = Number(values.height) / 100; // convert cm to m
            if (weight > 0 && height > 0) {
                const bmi = weight / (height * height);
                let category = '';
                if (bmi < 18.5) category = 'Underweight';
                else if (bmi < 24.9) category = 'Normal weight';
                else if (bmi < 29.9) category = 'Overweight';
                else category = 'Obesity';
                return {
                    result: bmi.toFixed(2),
                    breakdown: [`BMI Category: ${category}`],
                };
            }
            return { result: 'Invalid input' };
        },
    },
    {
        id: 'simple-interest-calculator',
        title: "Simple Interest Calculator",
        description: "Calculates simple interest based on principal, rate, and time.",
        fields: [
            { name: 'principal', label: 'Principal Amount ($)', type: 'number', placeholder: 'e.g., 1000' },
            { name: 'rate', label: 'Annual Interest Rate (%)', type: 'number', placeholder: 'e.g., 5' },
            { name: 'time', label: 'Time (Years)', type: 'number', placeholder: 'e.g., 2' },
        ],
        calculate: (values) => {
            const principal = Number(values.principal);
            const rate = Number(values.rate);
            const time = Number(values.time);
            if (principal > 0 && rate > 0 && time > 0) {
                const interest = (principal * rate * time) / 100;
                const total = principal + interest;
                return {
                    result: `$${total.toFixed(2)}`,
                    breakdown: [
                        `Principal: $${principal.toFixed(2)}`,
                        `Interest: $${interest.toFixed(2)}`,
                    ],
                };
            }
            return { result: 'Invalid input' };
        },
    },
    {
        id: 'symbolic-math-calculator',
        title: "Symbolic Math Calculator",
        description: "Performs symbolic math operations like integration and differentiation.",
        fields: [
            { name: 'expression', label: 'Expression', type: 'text', placeholder: 'e.g., integrate(x^2, x)' },
        ],
        calculate: (values) => {
            try {
                const result = math.evaluate(values.expression);
                return { result: result.toString() };
            } catch (error: any) {
                return { result: `Error: ${error.message}` };
            }
        },
    }
];
