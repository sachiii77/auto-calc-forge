// Mock calculator templates for the MVP
// In a real implementation, these would be generated by AI

interface CalculatorField {
  name: string;
  label: string;
  type: "number" | "select";
  options?: string[];
  placeholder?: string;
}

interface CalculatorTemplate {
  title: string;
  description: string;
  fields: CalculatorField[];
  calculate: (values: Record<string, any>) => { result: string; breakdown?: string[] };
}

export const calculatorTemplates: Record<string, CalculatorTemplate> = {
  "bmi": {
    title: "BMI Calculator",
    description: "Calculate your Body Mass Index and health category based on height and weight.",
    fields: [
      { name: "height", label: "Height (cm)", type: "number", placeholder: "170" },
      { name: "weight", label: "Weight (kg)", type: "number", placeholder: "70" },
    ],
    calculate: (values) => {
      const { height, weight } = values;
      const heightInMeters = height / 100;
      const bmi = weight / (heightInMeters * heightInMeters);
      
      let category = "";
      if (bmi < 18.5) category = "Underweight";
      else if (bmi < 25) category = "Normal weight";
      else if (bmi < 30) category = "Overweight";
      else category = "Obese";

      return {
        result: `${bmi.toFixed(1)} - ${category}`,
        breakdown: [
          `BMI = Weight ÷ (Height × Height)`,
          `BMI = ${weight} ÷ (${heightInMeters.toFixed(2)} × ${heightInMeters.toFixed(2)})`,
          `BMI = ${bmi.toFixed(1)}`,
          `Category: ${category}`
        ]
      };
    }
  },

  "mortgage": {
    title: "Mortgage Payment Calculator",
    description: "Calculate your monthly mortgage payments including principal and interest.",
    fields: [
      { name: "loanAmount", label: "Loan Amount ($)", type: "number", placeholder: "300000" },
      { name: "interestRate", label: "Annual Interest Rate (%)", type: "number", placeholder: "3.5" },
      { name: "loanTerm", label: "Loan Term (years)", type: "number", placeholder: "30" },
    ],
    calculate: (values) => {
      const { loanAmount, interestRate, loanTerm } = values;
      const monthlyRate = (interestRate / 100) / 12;
      const numberOfPayments = loanTerm * 12;
      
      const monthlyPayment = loanAmount * (monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) / 
                            (Math.pow(1 + monthlyRate, numberOfPayments) - 1);
      
      const totalPayment = monthlyPayment * numberOfPayments;
      const totalInterest = totalPayment - loanAmount;

      return {
        result: `$${monthlyPayment.toFixed(2)}/month`,
        breakdown: [
          `Monthly payment: $${monthlyPayment.toFixed(2)}`,
          `Total amount paid: $${totalPayment.toFixed(2)}`,
          `Total interest paid: $${totalInterest.toFixed(2)}`,
          `Principal: $${loanAmount.toFixed(2)}`
        ]
      };
    }
  },

  "compound_interest": {
    title: "Compound Interest Calculator",
    description: "Calculate the future value of your investments with compound interest.",
    fields: [
      { name: "principal", label: "Initial Investment ($)", type: "number", placeholder: "10000" },
      { name: "monthlyContribution", label: "Monthly Contribution ($)", type: "number", placeholder: "500" },
      { name: "annualRate", label: "Annual Interest Rate (%)", type: "number", placeholder: "7" },
      { name: "years", label: "Investment Period (years)", type: "number", placeholder: "20" },
    ],
    calculate: (values) => {
      const { principal, monthlyContribution, annualRate, years } = values;
      const monthlyRate = (annualRate / 100) / 12;
      const numberOfPayments = years * 12;
      
      // Future value of principal
      const principalFV = principal * Math.pow(1 + monthlyRate, numberOfPayments);
      
      // Future value of monthly contributions
      const contributionsFV = monthlyContribution * 
        ((Math.pow(1 + monthlyRate, numberOfPayments) - 1) / monthlyRate);
      
      const totalFV = principalFV + contributionsFV;
      const totalContributions = principal + (monthlyContribution * numberOfPayments);
      const totalInterest = totalFV - totalContributions;

      return {
        result: `$${totalFV.toFixed(2)}`,
        breakdown: [
          `Final amount: $${totalFV.toFixed(2)}`,
          `Total contributions: $${totalContributions.toFixed(2)}`,
          `Interest earned: $${totalInterest.toFixed(2)}`,
          `Effective return: ${((totalInterest / totalContributions) * 100).toFixed(1)}%`
        ]
      };
    }
  },

  "tip": {
    title: "Tip Calculator",
    description: "Calculate tips and split bills easily among multiple people.",
    fields: [
      { name: "billAmount", label: "Bill Amount ($)", type: "number", placeholder: "85.50" },
      { name: "tipPercentage", label: "Tip Percentage (%)", type: "number", placeholder: "18" },
      { name: "numberOfPeople", label: "Number of People", type: "number", placeholder: "4" },
    ],
    calculate: (values) => {
      const { billAmount, tipPercentage, numberOfPeople } = values;
      const tipAmount = billAmount * (tipPercentage / 100);
      const totalAmount = billAmount + tipAmount;
      const perPersonAmount = totalAmount / numberOfPeople;

      return {
        result: `$${perPersonAmount.toFixed(2)} per person`,
        breakdown: [
          `Bill amount: $${billAmount.toFixed(2)}`,
          `Tip (${tipPercentage}%): $${tipAmount.toFixed(2)}`,
          `Total amount: $${totalAmount.toFixed(2)}`,
          `Split ${numberOfPeople} ways: $${perPersonAmount.toFixed(2)} each`
        ]
      };
    }
  },

  "calorie": {
    title: "Daily Calorie Calculator",
    description: "Calculate your daily caloric needs based on age, gender, weight, height, and activity level.",
    fields: [
      { name: "age", label: "Age (years)", type: "number", placeholder: "30" },
      { name: "gender", label: "Gender", type: "select", options: ["Male", "Female"] },
      { name: "weight", label: "Weight (kg)", type: "number", placeholder: "70" },
      { name: "height", label: "Height (cm)", type: "number", placeholder: "170" },
      { name: "activity", label: "Activity Level", type: "select", options: [
        "Sedentary", "Lightly Active", "Moderately Active", "Very Active", "Extremely Active"
      ]},
    ],
    calculate: (values) => {
      const { age, gender, weight, height, activity } = values;
      
      // Calculate BMR using Mifflin-St Jeor Equation
      let bmr;
      if (gender === "Male") {
        bmr = 10 * weight + 6.25 * height - 5 * age + 5;
      } else {
        bmr = 10 * weight + 6.25 * height - 5 * age - 161;
      }
      
      // Activity multipliers
      const activityMultipliers: Record<string, number> = {
        "Sedentary": 1.2,
        "Lightly Active": 1.375,
        "Moderately Active": 1.55,
        "Very Active": 1.725,
        "Extremely Active": 1.9
      };
      
      const totalCalories = bmr * activityMultipliers[activity];
      const maintenanceCalories = Math.round(totalCalories);
      const weightLossCalories = Math.round(totalCalories - 500);
      const weightGainCalories = Math.round(totalCalories + 500);

      return {
        result: `${maintenanceCalories} calories/day`,
        breakdown: [
          `BMR (Base Metabolic Rate): ${Math.round(bmr)} calories`,
          `Activity Level: ${activity}`,
          `Maintenance: ${maintenanceCalories} calories/day`,
          `Weight Loss: ${weightLossCalories} calories/day (-500)`,
          `Weight Gain: ${weightGainCalories} calories/day (+500)`
        ]
      };
    }
  },

  "gpa": {
    title: "GPA Calculator",
    description: "Calculate your Grade Point Average based on course grades and credit hours.",
    fields: [
      { name: "course1Grade", label: "Course 1 Grade", type: "select", options: ["A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "F"] },
      { name: "course1Credits", label: "Course 1 Credits", type: "number", placeholder: "3" },
      { name: "course2Grade", label: "Course 2 Grade", type: "select", options: ["A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "F"] },
      { name: "course2Credits", label: "Course 2 Credits", type: "number", placeholder: "3" },
      { name: "course3Grade", label: "Course 3 Grade", type: "select", options: ["A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "F"] },
      { name: "course3Credits", label: "Course 3 Credits", type: "number", placeholder: "4" },
    ],
    calculate: (values) => {
      const gradePoints: Record<string, number> = {
        "A+": 4.0, "A": 4.0, "A-": 3.7,
        "B+": 3.3, "B": 3.0, "B-": 2.7,
        "C+": 2.3, "C": 2.0, "C-": 1.7,
        "D+": 1.3, "D": 1.0, "F": 0.0
      };

      let totalPoints = 0;
      let totalCredits = 0;
      let courses = [];

      for (let i = 1; i <= 3; i++) {
        const grade = values[`course${i}Grade`];
        const credits = values[`course${i}Credits`];
        
        if (grade && credits) {
          const points = gradePoints[grade] * credits;
          totalPoints += points;
          totalCredits += credits;
          courses.push(`Course ${i}: ${grade} (${credits} credits) = ${points.toFixed(1)} points`);
        }
      }

      const gpa = totalCredits > 0 ? totalPoints / totalCredits : 0;

      return {
        result: `${gpa.toFixed(2)} GPA`,
        breakdown: [
          ...courses,
          `Total points: ${totalPoints.toFixed(1)}`,
          `Total credits: ${totalCredits}`,
          `GPA: ${gpa.toFixed(2)}`
        ]
      };
    }
  }
};

// Simple AI-like matching function to find the best calculator template
export const findBestCalculatorTemplate = (description: string): string => {
  const lowerDescription = description.toLowerCase();
  
  // Simple keyword matching
  if (lowerDescription.includes("bmi") || lowerDescription.includes("body mass")) return "bmi";
  if (lowerDescription.includes("mortgage") || lowerDescription.includes("loan payment")) return "mortgage";
  if (lowerDescription.includes("compound interest") || lowerDescription.includes("investment")) return "compound_interest";
  if (lowerDescription.includes("tip") || lowerDescription.includes("split bill")) return "tip";
  if (lowerDescription.includes("calorie") || lowerDescription.includes("daily caloric")) return "calorie";
  if (lowerDescription.includes("gpa") || lowerDescription.includes("grade point")) return "gpa";
  
  // Default to BMI calculator if no match found
  return "bmi";
};